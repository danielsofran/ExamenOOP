        -:    0:Source:C:/Qt/6.3.0/mingw_64/include/QtCore/qobject_impl.h
        -:    0:Graph:C:\Desktop\Examen\cmake-build-debug-coverage\CMakeFiles\Examen.dir\UI\GUI.cpp.gcno
        -:    0:Data:C:\Desktop\Examen\cmake-build-debug-coverage\CMakeFiles\Examen.dir\UI\GUI.cpp.gcda
        -:    0:Runs:1
        -:    1:/****************************************************************************
        -:    2:**
        -:    3:** Copyright (C) 2016 The Qt Company Ltd.
        -:    4:** Contact: https://www.qt.io/licensing/
        -:    5:**
        -:    6:** This file is part of the QtCore module of the Qt Toolkit.
        -:    7:**
        -:    8:** $QT_BEGIN_LICENSE:LGPL$
        -:    9:** Commercial License Usage
        -:   10:** Licensees holding valid commercial Qt licenses may use this file in
        -:   11:** accordance with the commercial license agreement provided with the
        -:   12:** Software or, alternatively, in accordance with the terms contained in
        -:   13:** a written agreement between you and The Qt Company. For licensing terms
        -:   14:** and conditions see https://www.qt.io/terms-conditions. For further
        -:   15:** information use the contact form at https://www.qt.io/contact-us.
        -:   16:**
        -:   17:** GNU Lesser General Public License Usage
        -:   18:** Alternatively, this file may be used under the terms of the GNU Lesser
        -:   19:** General Public License version 3 as published by the Free Software
        -:   20:** Foundation and appearing in the file LICENSE.LGPL3 included in the
        -:   21:** packaging of this file. Please review the following information to
        -:   22:** ensure the GNU Lesser General Public License version 3 requirements
        -:   23:** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
        -:   24:**
        -:   25:** GNU General Public License Usage
        -:   26:** Alternatively, this file may be used under the terms of the GNU
        -:   27:** General Public License version 2.0 or (at your option) the GNU General
        -:   28:** Public license version 3 or any later version approved by the KDE Free
        -:   29:** Qt Foundation. The licenses are as published by the Free Software
        -:   30:** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
        -:   31:** included in the packaging of this file. Please review the following
        -:   32:** information to ensure the GNU General Public License requirements will
        -:   33:** be met: https://www.gnu.org/licenses/gpl-2.0.html and
        -:   34:** https://www.gnu.org/licenses/gpl-3.0.html.
        -:   35:**
        -:   36:** $QT_END_LICENSE$
        -:   37:**
        -:   38:****************************************************************************/
        -:   39:
        -:   40:#ifndef Q_QDOC
        -:   41:
        -:   42:#ifndef QOBJECT_H
        -:   43:#error Do not include qobject_impl.h directly
        -:   44:#endif
        -:   45:
        -:   46:#if 0
        -:   47:#pragma qt_sync_skip_header_check
        -:   48:#pragma qt_sync_stop_processing
        -:   49:#endif
        -:   50:
        -:   51:QT_BEGIN_NAMESPACE
        -:   52:
        -:   53:
        -:   54:namespace QtPrivate {
        -:   55:    /*
        -:   56:        Logic to statically generate the array of qMetaTypeId
        -:   57:        ConnectionTypes<FunctionPointer<Signal>::Arguments>::types() returns an array
        -:   58:        of int that is suitable for the types arguments of the connection functions.
        -:   59:
        -:   60:        The array only exist of all the types are declared as a metatype
        -:   61:        (detected using the TypesAreDeclaredMetaType helper struct)
        -:   62:        If one of the type is not declared, the function return 0 and the signal
        -:   63:        cannot be used in queued connection.
        -:   64:    */
        -:   65:    template <typename ArgList> struct TypesAreDeclaredMetaType { enum { Value = false }; };
        -:   66:    template <> struct TypesAreDeclaredMetaType<List<>> { enum { Value = true }; };
        -:   67:    template <typename Arg, typename... Tail> struct TypesAreDeclaredMetaType<List<Arg, Tail...> >
        -:   68:    { enum { Value = QMetaTypeId2<Arg>::Defined && TypesAreDeclaredMetaType<List<Tail...>>::Value }; };
        -:   69:
        -:   70:    template <typename ArgList, bool Declared = TypesAreDeclaredMetaType<ArgList>::Value > struct ConnectionTypes
        -:   71:    { static const int *types() { return nullptr; } };
        -:   72:    template <> struct ConnectionTypes<List<>, true>
        -:   73:    { static const int *types() { return nullptr; } };
        -:   74:    template <typename... Args> struct ConnectionTypes<List<Args...>, true>
    #####:   75:    { static const int *types() { static const int t[sizeof...(Args) + 1] = { (QtPrivate::QMetaTypeIdHelper<Args>::qt_metatype_id())..., 0 }; return t; } };
------------------
_ZN9QtPrivate15ConnectionTypesINS_4ListIJbEEELb1EE5typesEv:
    #####:   75:    { static const int *types() { static const int t[sizeof...(Args) + 1] = { (QtPrivate::QMetaTypeIdHelper<Args>::qt_metatype_id())..., 0 }; return t; } };
------------------
_ZN9QtPrivate15ConnectionTypesINS_4ListIJiiEEELb1EE5typesEv:
    #####:   75:    { static const int *types() { static const int t[sizeof...(Args) + 1] = { (QtPrivate::QMetaTypeIdHelper<Args>::qt_metatype_id())..., 0 }; return t; } };
------------------
        -:   76:
        -:   77:    // implementation of QSlotObjectBase for which the slot is a static function
        -:   78:    // Args and R are the List of arguments and the return type of the signal to which the slot is connected.
        -:   79:    template<typename Func, typename Args, typename R> class QStaticSlotObject : public QSlotObjectBase
        -:   80:    {
        -:   81:        typedef QtPrivate::FunctionPointer<Func> FuncType;
        -:   82:        Func function;
        -:   83:        static void impl(int which, QSlotObjectBase *this_, QObject *r, void **a, bool *ret)
        -:   84:        {
        -:   85:            switch (which) {
        -:   86:            case Destroy:
        -:   87:                delete static_cast<QStaticSlotObject*>(this_);
        -:   88:                break;
        -:   89:            case Call:
        -:   90:                FuncType::template call<Args, R>(static_cast<QStaticSlotObject*>(this_)->function, r, a);
        -:   91:                break;
        -:   92:            case Compare:   // not implemented
        -:   93:            case NumOperations:
        -:   94:                Q_UNUSED(ret);
        -:   95:            }
        -:   96:        }
        -:   97:    public:
        -:   98:        explicit QStaticSlotObject(Func f) : QSlotObjectBase(&impl), function(f) {}
        -:   99:    };
        -:  100:}
        -:  101:
        -:  102:
        -:  103:QT_END_NAMESPACE
        -:  104:
        -:  105:#endif
